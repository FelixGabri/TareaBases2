<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Empleados</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body { padding: 20px; font-family: Arial; background-color: white; }
        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); border: 1px solid #e0e0e0; }
        h1 { text-align: center; margin-bottom: 2rem; color: #333; }
        .filters { display: flex; gap: 1rem; margin-bottom: 2rem; flex-wrap: wrap; }
        .filter-group { flex: 1; min-width: 200px; }
        .filter-group label { display: block; margin-bottom: 0.5rem; color: #333; }
        .filter-group input { width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; font-size: 1rem; }
        .filter-group input:focus { outline: none; border-color: #ff69b4; }
        .employee-table { width: 100%; border-collapse: collapse; margin-bottom: 2rem; }
        .employee-table th, .employee-table td { padding: 1rem; text-align: left; border-bottom: 1px solid #e0e0e0; }
        .employee-table th { background-color: #f8f9fa; font-weight: bold; color: #333; }
        .employee-table tr:hover { background-color: #f8f9fa; cursor: pointer; }
        .status-active { color: #28a745; font-weight: bold; }
        .status-inactive { color: #dc3545; font-weight: bold; }
        .button-container { text-align: center; }
        .btn-primary { padding: 0.75rem 2rem; background-color: #ff69b4; color: white; border: none; border-radius: 4px; font-size: 1rem; cursor: pointer; }
        .btn-primary:hover { background-color: #ff1493; }
        .loading { text-align: center; padding: 2rem; color: #666; }
        .no-data { text-align: center; padding: 2rem; color: #666; font-style: italic; }
        .error-message { background-color: #ffe6e6; color: #d63384; padding: 1rem; border-radius: 4px; margin-bottom: 1rem; text-align: center; }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Componente del formulario de inserción
        function InsertarEmpleadoForm({ onClose, onEmpleadoInsertado }) {
            const [formData, setFormData] = useState({
                idPuesto: '',
                valorDocumentoIdentidad: '',
                nombre: '',
                fechaContratacion: ''
            });
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState('');

            const handleSubmit = async (e) => {
                e.preventDefault();
                setLoading(true);
                setError('');

                // Validaciones
                if (!formData.idPuesto || !formData.valorDocumentoIdentidad || !formData.nombre || !formData.fechaContratacion) {
                    setError('Todos los campos son requeridos');
                    setLoading(false);
                    return;
                }

                try {
                    const response = await fetch('http://localhost:3000/api/empleados', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert('✅ Empleado insertado correctamente');
                        onEmpleadoInsertado();
                        onClose();
                    } else {
                        setError(result.message || 'Error al insertar empleado');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    setError('Error de conexión con el servidor');
                } finally {
                    setLoading(false);
                }
            };

            const handleChange = (field, value) => {
                setFormData(prev => ({
                    ...prev,
                    [field]: value
                }));
            };

            return React.createElement('div', { 
                style: { 
                    position: 'fixed', 
                    top: 0, 
                    left: 0, 
                    right: 0, 
                    bottom: 0, 
                    backgroundColor: 'rgba(0,0,0,0.5)', 
                    display: 'flex', 
                    justifyContent: 'center', 
                    alignItems: 'center',
                    zIndex: 1000
                } 
            },
                React.createElement('div', { 
                    style: { 
                        backgroundColor: 'white', 
                        padding: '2rem', 
                        borderRadius: '8px', 
                        width: '90%', 
                        maxWidth: '500px',
                        boxShadow: '0 4px 20px rgba(0,0,0,0.2)'
                    } 
                },
                    React.createElement('h2', { style: { marginBottom: '1.5rem', color: '#333' } }, 'Insertar Nuevo Empleado'),
                    
                    error && React.createElement('div', { 
                        style: { 
                            backgroundColor: '#ffe6e6', 
                            color: '#d63384', 
                            padding: '0.75rem', 
                            borderRadius: '4px', 
                            marginBottom: '1rem' 
                        } 
                    }, error),
                    
                    React.createElement('form', { onSubmit: handleSubmit },
                        // Campo Puesto
                        React.createElement('div', { style: { marginBottom: '1rem' } },
                            React.createElement('label', { 
                                style: { display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' } 
                            }, 'Puesto:'),
                            React.createElement('select', {
                                value: formData.idPuesto,
                                onChange: (e) => handleChange('idPuesto', e.target.value),
                                style: { width: '100%', padding: '0.75rem', border: '1px solid #ddd', borderRadius: '4px' },
                                disabled: loading
                            },
                                React.createElement('option', { value: '' }, 'Seleccionar puesto'),
                                React.createElement('option', { value: '1' }, 'Desarrollador'),
                                React.createElement('option', { value: '2' }, 'Diseñador'),
                                React.createElement('option', { value: '3' }, 'Gerente'),
                                React.createElement('option', { value: '4' }, 'Analista')
                            )
                        ),
                        
                        // Campo Cédula
                        React.createElement('div', { style: { marginBottom: '1rem' } },
                            React.createElement('label', { 
                                style: { display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' } 
                            }, 'Cédula:'),
                            React.createElement('input', {
                                type: 'text',
                                value: formData.valorDocumentoIdentidad,
                                onChange: (e) => handleChange('valorDocumentoIdentidad', e.target.value),
                                placeholder: 'Ej: 123456789',
                                style: { width: '100%', padding: '0.75rem', border: '1px solid #ddd', borderRadius: '4px' },
                                disabled: loading
                            })
                        ),
                        
                        // Campo Nombre
                        React.createElement('div', { style: { marginBottom: '1rem' } },
                            React.createElement('label', { 
                                style: { display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' } 
                            }, 'Nombre Completo:'),
                            React.createElement('input', {
                                type: 'text',
                                value: formData.nombre,
                                onChange: (e) => handleChange('nombre', e.target.value),
                                placeholder: 'Ej: Juan Pérez García',
                                style: { width: '100%', padding: '0.75rem', border: '1px solid #ddd', borderRadius: '4px' },
                                disabled: loading
                            })
                        ),
                        
                        // Campo Fecha
                        React.createElement('div', { style: { marginBottom: '1.5rem' } },
                            React.createElement('label', { 
                                style: { display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' } 
                            }, 'Fecha de Contratación:'),
                            React.createElement('input', {
                                type: 'date',
                                value: formData.fechaContratacion,
                                onChange: (e) => handleChange('fechaContratacion', e.target.value),
                                style: { width: '100%', padding: '0.75rem', border: '1px solid #ddd', borderRadius: '4px' },
                                disabled: loading
                            })
                        ),
                        
                        // Botones
                        React.createElement('div', { style: { display: 'flex', gap: '1rem', justifyContent: 'flex-end' } },
                            React.createElement('button', {
                                type: 'button',
                                onClick: onClose,
                                style: { 
                                    padding: '0.75rem 1.5rem', 
                                    backgroundColor: '#6c757d', 
                                    color: 'white', 
                                    border: 'none', 
                                    borderRadius: '4px',
                                    cursor: 'pointer'
                                },
                                disabled: loading
                            }, 'Cancelar'),
                            React.createElement('button', {
                                type: 'submit',
                                style: { 
                                    padding: '0.75rem 1.5rem', 
                                    backgroundColor: '#ff69b4', 
                                    color: 'white', 
                                    border: 'none', 
                                    borderRadius: '4px',
                                    cursor: loading ? 'not-allowed' : 'pointer',
                                    opacity: loading ? 0.7 : 1
                                },
                                disabled: loading
                            }, loading ? 'Insertando...' : 'Insertar Empleado')
                        )
                    )
                )
            );
        }

        // Componente principal
        function EmployeeTable() {
            const [employees, setEmployees] = useState([]);
            const [loading, setLoading] = useState(true);
            const [filters, setFilters] = useState({ nombre: '', cedula: '' });
            const [error, setError] = useState('');
            const [mostrarFormulario, setMostrarFormulario] = useState(false);

            useEffect(() => {
                cargarEmpleados();
            }, []);

            const cargarEmpleados = async () => {
                setLoading(true);
                setError('');
                try {
                    console.log("🔄 Conectando con backend...");
                    const response = await fetch('http://localhost:3000/api/empleados');
                    
                    if (response.ok) {
                        const data = await response.json();
                        console.log("✅ Datos del backend:", data);
                        setEmployees(data);
                    } else {
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }
                } catch (error) {
                    console.error("❌ Error cargando empleados:", error);
                    setError('No se pudieron cargar los empleados. Verifica que el backend esté ejecutándose.');
                    
                    // Datos de ejemplo como fallback
                    setEmployees([
                        { 
                            Id: 1, 
                            Nombre: 'Juan Pérez (Ejemplo)', 
                            ValorDocumentoIdentidad: '123456789', 
                            PuestoNombre: 'Desarrollador',
                            SaldoVacaciones: 15, 
                            EsActivo: true 
                        },
                        { 
                            Id: 2, 
                            Nombre: 'María García (Ejemplo)', 
                            ValorDocumentoIdentidad: '987654321', 
                            PuestoNombre: 'Diseñadora',
                            SaldoVacaciones: 8, 
                            EsActivo: true 
                        }
                    ]);
                } finally {
                    setLoading(false);
                }
            };

            // Filtrar empleados
            const filteredEmployees = employees.filter(employee => {
                const nombre = employee.Nombre || employee.nombre || '';
                const cedula = employee.ValorDocumentoIdentidad || employee.cedula || '';
                
                const nombreMatch = nombre.toLowerCase().includes(filters.nombre.toLowerCase());
                const cedulaMatch = cedula.includes(filters.cedula);
                
                if (filters.nombre === '' && filters.cedula === '') {
                    return true;
                }
                
                return nombreMatch && cedulaMatch;
            });

            const handleFilterChange = (filterType, value) => {
                setFilters(prev => ({
                    ...prev,
                    [filterType]: value
                }));
            };

            const abrirActualizar = (employeeId) => {
                window.open(`actualizar.html?id=${employeeId}`, '_blank');
            };

            const abrirFormulario = () => {
                setMostrarFormulario(true);
            };

            const cerrarFormulario = () => {
                setMostrarFormulario(false);
            };

            const recargarEmpleados = () => {
                cargarEmpleados();
            };

            if (loading) {
                return React.createElement('div', { className: 'container' },
                    React.createElement('h1', null, 'Lista de Empleados'),
                    React.createElement('div', { className: 'loading' }, '🔄 Conectando con el servidor...')
                );
            }

            return React.createElement('div', { className: 'container' },
                React.createElement('h1', null, 'Lista de Empleados'),
                
                // Mensaje de error
                error && React.createElement('div', { className: 'error-message' }, error),
                
                // Botón recargar
                React.createElement('div', { style: { textAlign: 'center', marginBottom: '1rem' } },
                    React.createElement('button', {
                        onClick: cargarEmpleados,
                        style: { 
                            padding: '0.5rem 1rem', 
                            backgroundColor: '#6c757d', 
                            color: 'white', 
                            border: 'none', 
                            borderRadius: '4px',
                            cursor: 'pointer'
                        }
                    }, 'Recargar Datos')
                ),

                // Filtros
                React.createElement('div', { className: 'filters' },
                    React.createElement('div', { className: 'filter-group' },
                        React.createElement('label', null, 'Filtrar por Nombre:'),
                        React.createElement('input', {
                            type: 'text',
                            placeholder: 'Ej: Juan Pérez',
                            value: filters.nombre,
                            onChange: (e) => handleFilterChange('nombre', e.target.value)
                        })
                    ),
                    React.createElement('div', { className: 'filter-group' },
                        React.createElement('label', null, 'Filtrar por Cédula:'),
                        React.createElement('input', {
                            type: 'text',
                            placeholder: 'Ej: 123456789',
                            value: filters.cedula,
                            onChange: (e) => handleFilterChange('cedula', e.target.value)
                        })
                    )
                ),

                // Contador de resultados
                React.createElement('p', { style: { marginBottom: '1rem', color: '#666' } }, 
                    `Mostrando ${filteredEmployees.length} de ${employees.length} empleados`),

                // Tabla 
                React.createElement('table', { className: 'employee-table' },
                    React.createElement('thead', null,
                        React.createElement('tr', null,
                            React.createElement('th', null, 'ID'),
                            React.createElement('th', null, 'Nombre'),
                            React.createElement('th', null, 'Cédula'),
                            React.createElement('th', null, 'Puesto'),
                            React.createElement('th', null, 'Saldo Vacaciones'),
                            React.createElement('th', null, 'Activo')
                        )
                    ),
                    React.createElement('tbody', null,
                        filteredEmployees.length > 0 ? (
                            filteredEmployees.map(employee => {
                                const id = employee.Id || employee.id;
                                const nombre = employee.Nombre || employee.nombre;
                                const cedula = employee.ValorDocumentoIdentidad || employee.cedula;
                                const puesto = employee.PuestoNombre || 'Sin puesto';
                                const saldo = employee.SaldoVacaciones || employee.saldoVacaciones || 0;
                                const activo = employee.EsActivo !== undefined ? employee.EsActivo : employee.activo;
                                
                                return React.createElement('tr', { 
                                    key: id,
                                    onClick: () => abrirActualizar(id)
                                },
                                    React.createElement('td', null, id),
                                    React.createElement('td', null, nombre),
                                    React.createElement('td', null, cedula),
                                    React.createElement('td', null, puesto),
                                    React.createElement('td', null, `${saldo} días`),
                                    React.createElement('td', null,
                                        React.createElement('span', { 
                                            className: activo ? 'status-active' : 'status-inactive'
                                        }, activo ? 'Sí' : 'No')
                                    )
                                );
                            })
                        ) : (
                            React.createElement('tr', null,
                                React.createElement('td', { 
                                    colSpan: '6', 
                                    className: 'no-data'
                                }, employees.length === 0 ? 
                                    'No hay empleados registrados' : 
                                    'No se encontraron empleados con los filtros aplicados'
                                )
                            )
                        )
                    )
                ),

                // Botón Insertar
                React.createElement('div', { className: 'button-container' },
                    React.createElement('button', { 
                        className: 'btn-primary',
                        onClick: abrirFormulario
                    }, 'Insertar Empleado')
                ),

                // Formulario modal
                mostrarFormulario && React.createElement(InsertarEmpleadoForm, {
                    onClose: cerrarFormulario,
                    onEmpleadoInsertado: recargarEmpleados
                })
            );
        }

        // Render con React 18
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(EmployeeTable));
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movimientos del Empleado</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: white;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        h1 {
            text-align: center;
            margin-bottom: 2rem;
            color: #333;
        }

        .employee-header {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
        }

        .employee-info h2 {
            color: #333;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .info-item {
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
        }

        .info-label {
            font-weight: bold;
            color: #555;
        }

        .info-value {
            color: #333;
        }

        .saldo-vacaciones {
            text-align: center;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            border: 2px solid #ff69b4;
        }

        .saldo-label {
            font-size: 1rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .saldo-value {
            font-size: 2rem;
            font-weight: bold;
            color: #ff69b4;
        }

        .movements-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
        }

        .movements-table th,
        .movements-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
            font-size: 0.9rem;
        }

        .movements-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #333;
            position: sticky;
            top: 0;
        }

        .movements-table tr:hover {
            background-color: #f8f9fa;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background-color: #ff69b4;
            color: white;
        }

        .btn-primary:hover {
            background-color: #ff1493;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #545b62;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }

        .no-data {
            text-align: center;
            padding: 2rem;
            color: #666;
            font-style: italic;
        }

        .header-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .positive {
            color: #28a745;
            font-weight: bold;
        }

        .negative {
            color: #dc3545;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        function Movimientos() {
            const [employee, setEmployee] = useState(null);
            const [movimientos, setMovimientos] = useState([]);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const employeeId = urlParams.get('id');

    if (!employeeId) {
        setLoading(false);
        return;
    }

    const cargarDatos = async () => {
        setLoading(true);
        try {
            // Cargar movimientos del backend
            const response = await fetch(`http://localhost:3000/api/movimientos/empleado/${employeeId}`);
            if (response.ok) {
                const movimientosData = await response.json();
                setMovimientos(movimientosData);
            }
            
            // Datos de ejemplo del empleado (por ahora)
            const employeesData = {
                '1': { 
                    id: 1, 
                    nombre: 'Juan Pérez', 
                    cedula: '123456789',
                    saldoVacaciones: 15
                },
                '2': { 
                    id: 2, 
                    nombre: 'María García', 
                    cedula: '987654321',
                    saldoVacaciones: 8
                },
                '3': { 
                    id: 3, 
                    nombre: 'Carlos López', 
                    cedula: '456123789',
                    saldoVacaciones: 22
                }
            };

            const employeeData = employeesData[employeeId];
            if (employeeData) {
                setEmployee(employeeData);
            }
            
        } catch (error) {
            console.error('Error cargando datos:', error);
        } finally {
            setLoading(false);
        }
    };

    cargarDatos();
}, []);

                // Simular carga de datos
                setTimeout(() => {
                    // Datos de ejemplo del empleado
                    const employeesData = {
                        '1': { 
                            id: 1, 
                            nombre: 'Juan Pérez', 
                            cedula: '123456789',
                            saldoVacaciones: 15.5
                        },
                        '2': { 
                            id: 2, 
                            nombre: 'María García', 
                            cedula: '987654321',
                            saldoVacaciones: 8.0
                        },
                        '3': { 
                            id: 3, 
                            nombre: 'Carlos López', 
                            cedula: '456123789',
                            saldoVacaciones: 22.0
                        }
                    };

                    const employeeData = employeesData[employeeId];
                    if (employeeData) {
                        setEmployee(employeeData);
                    }

                    // Array vacío
                    setMovimientos([]);
                    setLoading(false);
                }, 1000);
            }, []);

            const goBack = () => {
                window.close(); // Cierra esta ventana
            };

            const insertarMovimiento = () => {
                // Abrir ventana para insertar movimiento
                if (employee) {
                    window.open(`insertar-movimiento.html?id=${employee.id}`, '_blank');
                }
            };

            if (loading) {
                return React.createElement('div', { className: 'container' },
                    React.createElement('div', { className: 'loading' }, 'Cargando movimientos...')
                );
            }

            if (!employee) {
                return React.createElement('div', { className: 'container' },
                    React.createElement('h1', null, 'Empleado no encontrado'),
                    React.createElement('button', { 
                        className: 'btn btn-secondary',
                        onClick: goBack
                    }, 'Cerrar')
                );
            }

            return React.createElement('div', { className: 'container' },
                // Header con acciones
                React.createElement('div', { className: 'header-actions' },
                    React.createElement('button', { 
                        className: 'btn btn-secondary',
                        onClick: goBack
                    }, '← Cerrar'),
                    React.createElement('button', {
                        className: 'btn btn-primary',
                        onClick: insertarMovimiento
                    }, 'Insertar Movimiento')
                ),
                
                React.createElement('h1', null, 'Movimientos de Vacaciones'),

                // Información del empleado
                React.createElement('div', { className: 'employee-header' },
                    React.createElement('div', { className: 'employee-info' },
                        React.createElement('h2', null, 'Información del Empleado'),
                        React.createElement('div', { className: 'info-item' },
                            React.createElement('span', { className: 'info-label' }, 'Nombre:'),
                            React.createElement('span', { className: 'info-value' }, employee.nombre)
                        ),
                        React.createElement('div', { className: 'info-item' },
                            React.createElement('span', { className: 'info-label' }, 'Cédula:'),
                            React.createElement('span', { className: 'info-value' }, employee.cedula)
                        ),
                        React.createElement('div', { className: 'info-item' },
                            React.createElement('span', { className: 'info-label' }, 'ID Empleado:'),
                            React.createElement('span', { className: 'info-value' }, employee.id)
                        )
                    ),
                    React.createElement('div', { className: 'saldo-vacaciones' },
                        React.createElement('div', { className: 'saldo-label' }, 'Saldo Actual de Vacaciones'),
                        React.createElement('div', { className: 'saldo-value' }, `${employee.saldoVacaciones} días`)
                    )
                ),

                // Tabla de movimientos
                React.createElement('h2', { style: { marginBottom: '1rem', color: '#333' } }, 'Historial de Movimientos'),
                React.createElement('table', { className: 'movements-table' },
                    React.createElement('thead', null,
                        React.createElement('tr', null,
                            React.createElement('th', null, 'Fecha'),
                            React.createElement('th', null, 'Tipo de Movimiento'),
                            React.createElement('th', null, 'Monto'),
                            React.createElement('th', null, 'Nuevo Saldo'),
                            React.createElement('th', null, 'Usuario'),
                            React.createElement('th', null, 'IP'),
                            React.createElement('th', null, 'Estampa de Tiempo')
                        )
                    ),
                    React.createElement('tbody', null,
                        movimientos.length > 0 ? (
                            movimientos.map(movimiento =>
                                React.createElement('tr', { key: movimiento.id },
                                    React.createElement('td', null, movimiento.fecha),
                                    React.createElement('td', null, movimiento.tipoMovimiento),
                                    React.createElement('td', { 
                                        className: movimiento.monto >= 0 ? 'positive' : 'negative'
                                    }, `${movimiento.monto >= 0 ? '+' : ''}${movimiento.monto} días`),
                                    React.createElement('td', null, `${movimiento.nuevoSaldo} días`),
                                    React.createElement('td', null, movimiento.usuario),
                                    React.createElement('td', null, movimiento.ip),
                                    React.createElement('td', null, movimiento.estampaTiempo)
                                )
                            )
                        ) : (
                            React.createElement('tr', null,
                                React.createElement('td', { 
                                    colSpan: '7', 
                                    style: { textAlign: 'center', padding: '2rem' } 
                                }, 'No hay movimientos registrados para este empleado')
                            )
                        )
                    )
                )
            );
        }

        // Renderizar la aplicación
        ReactDOM.render(React.createElement(Movimientos), document.getElementById('root'));
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Sistema Empleados</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: white;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }

        .login-form {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            border: 1px solid #e0e0e0;
        }

        .login-form h2 {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #333;
            font-size: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: normal;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            background-color: white;
        }

        .form-group input:focus {
            outline: none;
            border-color: #ff69b4;
        }

        .btn-primary {
            width: 100%;
            padding: 0.75rem;
            background-color: #ff69b4;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 1rem;
        }

        .btn-primary:hover {
            background-color: #ff1493;
        }

        .btn-primary:disabled {
            background-color: #ffb6c1;
            cursor: not-allowed;
        }

        .error-message {
            color: #d63384;
            text-align: center;
            margin-top: 1rem;
            padding: 0.5rem;
            background-color: #fff0f6;
            border: 1px solid #ffb6c1;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState } = React;

        function Login() {
            const [credentials, setCredentials] = useState({
                usuario: '',
                contraseña: ''
            });
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState('');

            const handleSubmit = async (e) => {
                e.preventDefault();
                
                if (!credentials.usuario.trim() || !credentials.contraseña.trim()) {
                    setError('Por favor completa todos los campos');
                    return;
                }

                setLoading(true);
                setError('');

                // Simular verificación de login
                setTimeout(() => {
                    if (credentials.usuario === 'admin' && credentials.contraseña === '1234') {
                        // Login exitoso - sin mensaje
                        console.log('Login exitoso');
                    } else {
                        setError('Usuario o contraseña incorrectos');
                    }
                    setLoading(false);
                }, 1000);
            };

            return React.createElement('div', { className: 'login-container' },
                React.createElement('div', { className: 'login-form' },
                    React.createElement('h2', null, 'Iniciar Sesión'),
                    
                    React.createElement('form', { onSubmit: handleSubmit },
                        React.createElement('div', { className: 'form-group' },
                            React.createElement('label', null, 'Usuario:'),
                            React.createElement('input', {
                                type: 'text',
                                value: credentials.usuario,
                                onChange: (e) => setCredentials({
                                    ...credentials, 
                                    usuario: e.target.value
                                }),
                                placeholder: 'Ingresa tu usuario',
                                disabled: loading
                            })
                        ),
                        
                        React.createElement('div', { className: 'form-group' },
                            React.createElement('label', null, 'Contraseña:'),
                            React.createElement('input', {
                                type: 'password',
                                value: credentials.contraseña,
                                onChange: (e) => setCredentials({
                                    ...credentials, 
                                    contraseña: e.target.value
                                }),
                                placeholder: 'Ingresa tu contraseña',
                                disabled: loading
                            })
                        ),
                        
                        React.createElement('button', { 
                            type: 'submit', 
                            className: 'btn-primary',
                            disabled: loading
                        }, loading ? 'Iniciando Sesión...' : 'Iniciar Sesión')
                    ),

                    // Solo muestra mensaje de error
                    error && React.createElement('div', { className: 'error-message' }, error)
                )
            );
        }

        // Renderizar la aplicación
        ReactDOM.render(React.createElement(Login), document.getElementById('root'));
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Actualizar Empleado</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: white;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }

        h1 {
            text-align: center;
            margin-bottom: 2rem;
            color: #333;
        }

        .employee-info {
            background-color: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 2rem;
            border: 1px solid #e0e0e0;
        }

        .info-item {
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
        }

        .info-label {
            font-weight: bold;
            color: #555;
        }

        .info-value {
            color: #333;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: bold;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #ff69b4;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            margin: 0.25rem;
        }

        .btn-primary {
            background-color: #ff69b4;
            color: white;
        }

        .btn-primary:hover {
            background-color: #ff1493;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #545b62;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn-success {
            background-color: #28a745;
            color: white;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }

        .error-message {
            background-color: #ffe6e6;
            color: #d63384;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            text-align: center;
        }

        .success-message {
            background-color: #d4edda;
            color: #155724;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            text-align: center;
        }

        .button-group {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
            flex-wrap: wrap;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
        }

        .back-link {
            display: inline-block;
            margin-bottom: 1rem;
            color: #ff69b4;
            text-decoration: none;
            cursor: pointer;
        }

        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        function ActualizarEmpleado() {
            const [employee, setEmployee] = useState(null);
            const [formData, setFormData] = useState({
                idPuesto: '',
                valorDocumentoIdentidad: '',
                nombre: ''
            });
            const [loading, setLoading] = useState(true);
            const [updating, setUpdating] = useState(false);
            const [error, setError] = useState('');
            const [success, setSuccess] = useState('');

            useEffect(() => {
                const urlParams = new URLSearchParams(window.location.search);
                const employeeId = urlParams.get('id');

                if (!employeeId) {
                    setError('No se especificó el ID del empleado');
                    setLoading(false);
                    return;
                }

                cargarEmpleado(employeeId);
            }, []);

            const cargarEmpleado = async (employeeId) => {
                try {
                    setLoading(true);
                    const response = await fetch(`http://localhost:3000/api/empleados`);
                    
                    if (response.ok) {
                        const employees = await response.json();
                        const employeeData = employees.find(emp => emp.Id == employeeId);
                        
                        if (employeeData) {
                            setEmployee(employeeData);
                            setFormData({
                                idPuesto: employeeData.IdPuesto ? employeeData.IdPuesto.toString() : '',
                                valorDocumentoIdentidad: employeeData.ValorDocumentoIdentidad || '',
                                nombre: employeeData.Nombre || ''
                            });
                        } else {
                            setError('Empleado no encontrado');
                        }
                    } else {
                        throw new Error('Error al cargar empleados');
                    }
                } catch (error) {
                    console.error('Error cargando empleado:', error);
                    setError('Error al cargar datos del empleado');
                } finally {
                    setLoading(false);
                }
            };

            const handleInputChange = (field, value) => {
                setFormData(prev => ({
                    ...prev,
                    [field]: value
                }));
            };

            const actualizarEmpleado = async () => {
    if (!employee) return;

    setUpdating(true);
    setError('');
    setSuccess('');

    try {
        const response = await fetch(`http://localhost:3000/api/empleados/${employee.Id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (result.success) {
            setSuccess('✅ Empleado actualizado correctamente');
            
            // Actualizar datos locales
            setEmployee(prev => ({
                ...prev,
                Nombre: formData.nombre,
                ValorDocumentoIdentidad: formData.valorDocumentoIdentidad,
                IdPuesto: parseInt(formData.idPuesto)
            }));
        } else {
            setError(result.message || 'Error al actualizar empleado');
        }
    } catch (error) {
        console.error('Error actualizando empleado:', error);
        setError('Error de conexión con el servidor');
    } finally {
        setUpdating(false);
    }
};

            const eliminarEmpleado = async () => {
    if (!employee || !confirm('¿Estás seguro de que deseas eliminar este empleado?')) {
        return;
    }

    setUpdating(true);
    setError('');
    setSuccess('');

    try {
        const response = await fetch(`http://localhost:3000/api/empleados/${employee.Id}`, {
            method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
            setSuccess('✅ Empleado eliminado correctamente');
            
            // Cerrar ventana después de 2 segundos
            setTimeout(() => {
                window.close();
            }, 2000);
        } else {
            setError(result.message || 'Error al eliminar empleado');
        }
    } catch (error) {
        console.error('Error eliminando empleado:', error);
        setError('Error de conexión con el servidor');
    } finally {
        setUpdating(false);
    }
};

            const abrirMovimientos = () => {
                if (employee) {
                    window.open(`movimientos.html?id=${employee.Id}`, '_blank');
                }
            };

            const goBack = () => {
                window.close();
            };

            if (loading) {
                return React.createElement('div', { className: 'container' },
                    React.createElement('div', { className: 'loading' }, 'Cargando datos del empleado...')
                );
            }

            if (!employee) {
                return React.createElement('div', { className: 'container' },
                    React.createElement('h1', null, 'Empleado no encontrado'),
                    React.createElement('button', { 
                        className: 'btn btn-secondary',
                        onClick: goBack
                    }, 'Cerrar')
                );
            }

            return React.createElement('div', { className: 'container' },
                React.createElement('a', { 
                    className: 'back-link',
                    onClick: goBack
                }, '← Cerrar'),
                
                React.createElement('h1', null, 'Actualizar Empleado'),
                
                // Información actual del empleado
                React.createElement('div', { className: 'employee-info' },
                    React.createElement('h3', { style: { marginBottom: '1rem', color: '#333' } }, 'Información Actual'),
                    React.createElement('div', { className: 'info-item' },
                        React.createElement('span', { className: 'info-label' }, 'ID:'),
                        React.createElement('span', { className: 'info-value' }, employee.Id)
                    ),
                    React.createElement('div', { className: 'info-item' },
                        React.createElement('span', { className: 'info-label' }, 'Saldo Vacaciones:'),
                        React.createElement('span', { className: 'info-value' }, `${employee.SaldoVacaciones} días`)
                    )
                ),

                // Mensajes de error/éxito
                error && React.createElement('div', { className: 'error-message' }, error),
                success && React.createElement('div', { className: 'success-message' }, success),

                // Formulario de actualización
                React.createElement('form', { onSubmit: (e) => e.preventDefault() },
                    React.createElement('div', { className: 'form-group' },
                        React.createElement('label', null, 'Puesto:'),
                        React.createElement('select', {
                            value: formData.idPuesto,
                            onChange: (e) => handleInputChange('idPuesto', e.target.value),
                            disabled: updating
                        },
                            React.createElement('option', { value: '' }, 'Seleccionar puesto'),
                            React.createElement('option', { value: '1' }, 'Desarrollador'),
                            React.createElement('option', { value: '2' }, 'Diseñador'),
                            React.createElement('option', { value: '3' }, 'Gerente'),
                            React.createElement('option', { value: '4' }, 'Analista')
                        )
                    ),

                    React.createElement('div', { className: 'form-group' },
                        React.createElement('label', null, 'Cédula:'),
                        React.createElement('input', {
                            type: 'text',
                            value: formData.valorDocumentoIdentidad,
                            onChange: (e) => handleInputChange('valorDocumentoIdentidad', e.target.value),
                            placeholder: 'Ej: 123456789',
                            disabled: updating
                        })
                    ),

                    React.createElement('div', { className: 'form-group' },
                        React.createElement('label', null, 'Nombre Completo:'),
                        React.createElement('input', {
                            type: 'text',
                            value: formData.nombre,
                            onChange: (e) => handleInputChange('nombre', e.target.value),
                            placeholder: 'Ej: Juan Pérez García',
                            disabled: updating
                        })
                    ),

                    // Botones de acción
                    React.createElement('div', { className: 'button-group' },
                        React.createElement('div', { className: 'action-buttons' },
                            React.createElement('button', {
                                className: 'btn btn-primary',
                                onClick: actualizarEmpleado,
                                disabled: updating || !formData.idPuesto || !formData.valorDocumentoIdentidad || !formData.nombre
                            }, updating ? 'Actualizando...' : 'Actualizar Empleado'),
                            
                            React.createElement('button', {
                                className: 'btn btn-success',
                                onClick: abrirMovimientos,
                                disabled: updating
                            }, 'Ver Movimientos')
                        ),
                        
                        React.createElement('button', {
                            className: 'btn btn-danger',
                            onClick: eliminarEmpleado,
                            disabled: updating
                        }, 'Eliminar Empleado')
                    )
                )
            );
        }

        // Renderizar la aplicación
        ReactDOM.render(React.createElement(ActualizarEmpleado), document.getElementById('root'));
    </script>
</body>
</html>
